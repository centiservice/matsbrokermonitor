// HTML GUI


dependencies {
    api project(":matsbrokermonitor-api")

    // MatsSerializer - even though you might supply null.
    implementation "io.mats3:mats-serial:$matsVersion"
    // Uses Jackson to try to pretty-print DTOs and STOs as JSON
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    // Logging.
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    // :: TESTING

    // The testing uses the ActiveMQ and JMS interfaces.
    testImplementation project(":matsbrokermonitor-activemq")
    testImplementation project(":matsbrokermonitor-jms")

    // MATS STUFF:
    // Need the JMS Mats
    testImplementation "io.mats3:mats-impl-jms:$matsVersion"
    // We need an implementation of the MatsSerializer, the MatsSerializerJson
    testImplementation "io.mats3:mats-serial-json:$matsVersion"
    // Testing tools for Mats
    testImplementation "io.mats3:mats-test-junit:$matsVersion"
    // We want the standard logging, which will be auto-installed by being on the classpath.
    testImplementation "io.mats3:mats-intercept-logging:$matsVersion"
    // We want the localinspect tool
    testImplementation "io.mats3:mats-localinspect:$matsVersion"

    // JMS API
    testImplementation "javax.jms:jms-api:$jmsApiVersion"
    // MatsTestBroker
    testImplementation "io.mats3:mats-test-broker:$matsVersion"
    // Must manually drag in ActiveMq broker
    testImplementation "org.apache.activemq:activemq-broker:$activeMqVersion"


    // Base Jetty Server
    testImplementation "org.eclipse.jetty:jetty-server:$jettyVersion"
    // .. Jetty Servlets
    testImplementation "org.eclipse.jetty:jetty-webapp:$jettyVersion"
    // .. Jetty: To get the @WebListener etc. annotation scanning.
    testImplementation "org.eclipse.jetty:jetty-annotations:$jettyVersion"

    // Logging
    testImplementation "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
}