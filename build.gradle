// Customize the Gradle Wrapper generation task.
wrapper {
    gradleVersion = "8.4"
    // Use "-all"-version of distribution, since IntelliJ works better then..
    setDistributionType(Wrapper.DistributionType.ALL)
}

allprojects {
    group = 'io.mats3.matsbrokermonitor'
    version = '1.1.0+2025-06-20'

    layout.buildDirectory = new File("build-gradle")
}

// Versions for all libraries used throughout the subprojects
ext {
    matsVersion = '1.0.0+2025-05-17'

    slf4jVersion = '2.0.17' // Only CompileOnly
    jmsApiDependency = 'jakarta.jms:jakarta.jms-api:2.0.3' // Only CompileOnly. Version following Mats3's lead.
    jacksonVersion = '2.19.0'

    stbHealthCheckVersion = '0.4.1+2024-05-07' // For 'matsbrokermonitor-stb-healthcheck'

    // === For testing
    activeMqVersion = '5.19.0'
    springVersion = '5.3.39' // Spring 6 depends on Java 17 and Jakarta EE 9+
    junitVersion = '4.13.2'
    logbackVersion = '1.5.18'
    jettyVersion = '9.4.57.v20241219'
}

subprojects {
    apply plugin: "java-library"

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(11))
        }
        withJavadocJar()
        withSourcesJar()
    }

    repositories { mavenCentral() }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.incremental = true
        options.compilerArgs += ['-Werror', '-Xlint:all', '-Xlint:-serial']
    }

    javadoc {
        // without the -quiet option, the build fails due to errors&warns
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'MatsBrokerMonitor',
                    'Implementation-Version': archiveVersion
        }
    }

    test {
        /*
         * It is possible to change the broker to which tests are run. Check mats3/build.gradle for more doc.
         *
         * An example:
         *
         * == Run all tests against an external Artemis MQ broker on localhost:
         * ./gradlew -Pmats.test.broker=artemis -Pmats.test.brokerurl=localhost clean test
         */
        systemProperties project.properties.subMap(["mats.test.brokerurl", "mats.test.broker"])
    }

    // ------------------------------------------------
    // -- Simple tools

    // Define dependency report task that all subprojects gets. Invoke with "./gradlew allDeps | less"
    tasks.register('allDeps', DependencyReportTask) {}

    // Some info about current gradle environment.
    tasks.register('systemInformation') {
        doLast {
            println "\n** Java properties [System.getProperties()], sorted:\n"
            System.properties.sort().each { k, v ->
                println("$k = $v")
            }
            println "\n** Environment [System.getenv()], sorted:\n"
            System.env.sort().each { k, v ->
                println("$k = $v")
            }
            println ''
            println "** Java Version:   " + System.getProperty("java.version")
            println "** Groovy Version: " + GroovySystem.getVersion()
            println "** Gradle Version: " + gradle.gradleVersion
        }
    }
}

// For publishing subprojects: All, minus 'matsbrokermonitor-app'
configure(subprojects.findAll { it.name != 'matsbrokermonitor-app' }) {
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    signing {
        // Sign everything, even MD5s and SHAs..
        sign publishing.publications
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = 'Mats Broker Monitor'
                    description = 'Monitoring solution for the backend message broker of Mats'
                    url = 'https://github.com/centiservice/matsbrokermonitor'
                    licenses {
                        license {
                            name = 'PolyForm Perimeter License 1.0.0 with examples'
                            url = 'https://github.com/centiservice/matsbrokermonitor/blob/main/LICENSE.md'
                        }
                    }
                    developers {
                        developer {
                            id = 'stolsvik'
                            name = 'Endre St√∏lsvik'
                            email = 'endre@stolsvik.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/centiservice/matsbrokermonitor.git'
                        developerConnection = 'scm:git:ssh://github.com:centiservice/matsbrokermonitor.git'
                        url = 'https://github.com/centiservice/matsbrokermonitor'
                    }
                }
                from components.java
            }
        }
        repositories {
            maven {
                name 'SonatypeOSSRHSnapshot'
                url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "should be in different file"
                    password findProperty('sonatypePassword') as String ?: "should be in different file"
                }
            }
            maven {
                name 'SonatypeOSSRHStaging'
                url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "should be in different file"
                    password findProperty('sonatypePassword') as String ?: "should be in different file"
                }
            }
        }
    }

    // Tasks to publish to Sonatype's OSSRH (OSS Repository Hosting), Snapshot and Staging
    tasks.register('matsPublishSnapshot') { dependsOn publishAllPublicationsToSonatypeOSSRHSnapshotRepository }
    tasks.register('matsPublishStaging') { dependsOn publishAllPublicationsToSonatypeOSSRHStagingRepository }
}