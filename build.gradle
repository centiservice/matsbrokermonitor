// MatsBrokerMonitor

plugins {
    id 'java-library'
    id "com.vanniktech.maven.publish" version "0.34.0" // Publish to Maven Central, over Portal Publisher API
    id "com.github.ben-manes.versions" version "0.53.0" // Checks dependencies.
}

// Customize the Gradle Wrapper generation task.
wrapper {
    gradleVersion = "9.2.0"
    // Use "-all"-version of distribution, since IntelliJ works better then..
    setDistributionType(Wrapper.DistributionType.ALL)
}

allprojects {
    group = 'io.mats3.matsbrokermonitor'
    version = 'B-2.0.0.B0+2025-10-27'

    layout.buildDirectory = new File("build-gradle")
}

// Versions for all libraries used throughout the subprojects
ext {
    matsVersion = '2.0.0+2025-11-01'

    slf4jVersion = '2.0.17'     // Only CompileOnly
    jakartaJmsVersion = '3.1.0' // Only CompileOnly. Version following Mats3's lead.
    jacksonVersion = '3.0.1'

    stbHealthCheckVersion = '0.4.1+2024-05-07' // For 'matsbrokermonitor-stb-healthcheck'

    // === For testing
    activeMqVersion = '6.1.8'
    junitVersion = '4.13.2'
    logbackVersion = '1.5.20'
    jettyVersion = '12.1.3'
}

// :: Find which Java version to use for the toolchain.
int javaVersion = 21;
if (project.properties.containsKey('mats.build.java_version')) {
    javaVersion = Integer.parseInt((String) project.properties['mats.build.java_version'])
    println "Specified Java version for toolchain, using Java version: $javaVersion"
}

// Check dependencies: `./gradlew dependencyUpdates --refresh-dependencies --no-parallel`
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        return ['RC', 'CR', '-M', 'ALPHA'].any { bad -> it.candidate.version.toUpperCase().contains(bad) }
    }
}

// Common for all subprojects
subprojects {
    apply plugin: "java-library"
    apply plugin: "com.vanniktech.maven.publish"

    repositories { mavenCentral() }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21

        toolchain {
            languageVersion.set(JavaLanguageVersion.of(javaVersion))
        }
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.incremental = true
        options.compilerArgs += ['-Werror', '-Xlint:all', '-Xlint:-serial']
    }

    javadoc {
        // without the -quiet option, the build fails due to errors&warns
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'MatsBrokerMonitor',
                    'Implementation-Version': archiveVersion
        }
    }

    test {
        /*
         * It is possible to change the broker to which tests are run. Check mats3/build.gradle for more doc.
         *
         * Two examples:
         *
         * == Run all tests with in-vm Artemis MQ brokers:
         * ./gradlew -Pmats.test.broker=artemis clean test
         *
         * == Run all tests against an external Artemis MQ broker on localhost:
         * ./gradlew -Pmats.test.broker=artemis -Pmats.test.brokerurl=localhost clean test
         */
        systemProperties project.properties.subMap(["mats.test.brokerurl", "mats.test.broker"])

        // Move over the CI environment variable, so that we can increase timings of tests if on CI environment.
        // (Check MatsTestLatch.WAIT_MILLIS_FOR_NON_OCCURENCE)
        systemProperties System.getenv().subMap(["CI"])

        testLogging {
            exceptionFormat = 'full'
        }
    }

    // Also clean out some dir sometimes popping up, IntelliJ?
    clean {
        delete "$projectDir/out/"
    }

    // Define dependency report task that all subprojects gets. Invoke with "./gradlew allDeps | less"
    tasks.register('allDeps', DependencyReportTask) {}

    // :: For publishing subprojects: All, minus 'mats-api-test*'
    if (!it.name.startsWith('matsbrokermonitor-app')) {
        mavenPublishing { // 'publishToMavenCentral' task.
            publishToMavenCentral()
            signAllPublications()

            coordinates(group.toString(), name, version.toString())

            pom {
                name = 'Mats Broker Monitor'
                description = 'Monitoring solution for the backend message broker of Mats'
                url = 'https://github.com/centiservice/matsbrokermonitor'
                licenses {
                    license {
                        name = 'PolyForm Perimeter License 1.0.0 with examples'
                        url = 'https://github.com/centiservice/matsbrokermonitor/blob/main/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id = 'stolsvik'
                        name = 'Endre StÃ¸lsvik'
                        email = 'endre@stolsvik.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/centiservice/matsbrokermonitor.git'
                    developerConnection = 'scm:git:ssh://github.com:centiservice/matsbrokermonitor.git'
                    url = 'https://github.com/centiservice/matsbrokermonitor'
                }
            }
        }
    }
}

clean {
    // Vanniktech publish plugin creates this, so clean it too.
    delete "build/"
    // Note: "build-gradle" pops back up after any gradle run, as config cache and problem report puts things there.
}

// ------------------------------------------------
// -- Simple tools

// Some info about current gradle environment.
import java.nio.charset.Charset
tasks.register('systemInformation') {
    def gradleVersion = gradle.gradleVersion // Needed due to config cache.
    doLast {
        println "\n** Java properties [System.getProperties()], sorted:\n"
        System.properties.sort().each { k, v ->
            println("$k = $v")
        }
        println "\n** Environment [System.getenv()], sorted:\n"
        System.env.sort().each { k, v ->
            println("$k = $v")
        }
        println ''
        println "** Charset.defaultCharset(): " + Charset.defaultCharset()
        println ''
        println "** Java Version:   " + System.getProperty("java.version")
        println "** Groovy Version: " + GroovySystem.getVersion()
        println "** Gradle Version: " + gradleVersion
    }
}
